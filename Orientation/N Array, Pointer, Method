#include <iostream>
using namespace std;

// 배열의 크기를 상수 변수로 지정, 배열의 크기와 메모리의 크기를 계산하여 저장하고, 배열을 생성 후 각 변수의 값을 초기화 후, 배열의 이름 및 각 원소에 주소 값을 출력 순서대로 출력한다.
// 배열의 이름에 인덱스를 더하는 포인터연산을 이용하여 각 원소의 주소값과 인덱스, 데이터를 출력한다. 배열의 이름을 포인터 변수에 저장하고, 포인터연산을 배열의 크기만큼 수행하여,
// 각 포인터의 참조와 주소값을 출력한다. 새로운 같은 크기에 배열을 만들고, 새로운 배열에 기존의 배열을 복사한다.
int main()
{
	// #1. 배열의 크기를 상수변수로 지정하고, 배열을 생성한다.
	const int index = 10;
	int numbers[index];

	// #2. 배열의 크기를 구하는 함수를 이용하여 계산한다.
	int arrSize = sizeof(numbers) / sizeof(numbers[0]);
	cout << "배열의 크기 : " << arrSize << endl;

	// #3. 배열에 반복문을 이용하여 배열의 원소를 초기화한다.
	int input = 1;
	cout << "구구단을 시작합니다. 원하는 숫자를 입력하세요. " << endl;
	cin >> input;

	for (int i = 0; i < arrSize; i++)
	{
		numbers[i] = input * (i + 1);
	}

	// #4. 배열을 출력하며 배열의 이름, 배열의 원소 각각의 주소값과 인덱스, 데이터값을 출력한다.
	cout << "\nnumbers[" << arrSize << "]" << endl;
	cout << "배열의 주소는 " << &numbers << "이며 첫번째 원소의 주소값과 같다.\n" << endl;

	for (int i = 0; i < arrSize; i++)
	{
		cout << i + 1 << "번째 인덱스의 값은 " << numbers[i] << " 이며 주소값은 " << &numbers[i] << endl;
	}

	cout << endl;

	// #5. 배열의 시작 원소에 포인터 연산을 하고, 각 결과의 주소값과 인덱스, 데이터값을 출력한다.

	for (int i = 0; i < arrSize; i++)
	{
		cout << i + 1 << "번째 포인터가 가리키는 값은 " << *(numbers + i)<< " 이며 주소값은 " << numbers + i << endl;
	}

	cout << endl;

	// #6. 배열 이름값을 포인터에 저장한 후, 포인터가 참조하는 값과 포인터가 가진 주소를 출력하고, 배열의 크기만큼 반복한다.
	int* startPoint = numbers;

	for (int i = 0; i < arrSize; i++)
	{
		cout << i + 1 << "번째 포인터가 가리키는 값은 " << *(startPoint) << " 이며 주소값은 " << startPoint << endl;
		startPoint++;
	}

	cout << endl;

	// #7. 같은 크기의 새로운 배열을 만들고, 만들어진 배열에 값을 복사하여 출력하기
	int temp[index];
	
	for (int i = 0; i < arrSize; i++)
	{
		temp[i] = numbers[i];
		cout << "복사된 배열의 " << i + 1 << "번째 값은 " << temp[i] << " 이며 주소값은 " << &temp[i] << endl; // 별도의 배열이기 때문에 다른 주소를 갖는다.
	}

	cout << endl;

	// #8. memcpy를 활용하여 배열을 복사하고, 배열의 값을 출력하기
	int temp2[index];
	memcpy(temp2, numbers, sizeof(numbers)); // memcpy의 마지막 요소의 크기는 바이트 단위로 입력해야 하기 때문에 sizeof를 사용한다.

	for (int i = 0; i < arrSize; i++)
	{
		cout << "두번째로 복사된 배열의 " << i + 1 << "번째 값은 " << temp2[i] << " 이며 주소값은 " << &temp2[i] << endl;
	}
}
